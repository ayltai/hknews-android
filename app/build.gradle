plugins {
    id 'com.android.application'
    id 'realm-android'
    id 'androidx.navigation.safeargs'
    id 'com.google.firebase.firebase-perf'
    id 'io.fabric'
    id 'checkstyle'
    id 'com.github.spotbugs'           version '2.0.0'
    id 'jacoco'
    id 'com.getkeepsafe.dexcount'
    id 'org.owasp.dependencycheck'     version '5.2.2'
    id 'com.github.ben-manes.versions' version '0.25.0'
}

String VERSION_REVISION = 'git rev-list --count HEAD'.execute().text.trim()
String VERSION_HASH     = 'git rev-parse --short HEAD'.execute().text.trim()

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        applicationId    'com.github.ayltai.hknews'
        minSdkVersion    19
        targetSdkVersion 29
        versionCode      1
        versionName      '1.0.' + VERSION_REVISION + '-' + VERSION_HASH

        testInstrumentationRunner          'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        dataBinding {
            enabled true
        }

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile     project.file('../key-store.jks')
            keyAlias      System.getenv('ANDROID_KEY_ALIAS')
            storePassword System.getenv('ANDROID_STORE_PASSWORD')
            keyPassword   System.getenv('ANDROID_KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }

            multiDexEnabled     true
            testCoverageEnabled true

            ext.enableCrashlytics = Boolean.valueOf(System.getenv('CI'))
        }

        release {
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }

            minifyEnabled   true
            shrinkResources true
            signingConfig   signingConfigs.release
            proguardFiles   getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution          'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources true
            returnDefaultValues     true
        }
    }

    lintOptions {
        abortOnError false
        disable      'MissingTranslation', 'RestrictedApi'
    }

    aaptOptions {
        noCompress 'tflite'
        noCompress 'lite'

        cruncherEnabled Boolean.valueOf(System.getenv('CI'))
    }

    dexOptions {
        preDexLibraries !Boolean.valueOf(System.getenv('CI'))
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    codacy
}

ext {
    multiDexVersion       = '2.0.1'
    supportLibraryVersion = '28.0.0'
    navigationVersion     = '2.2.0-alpha03'
    lifecycleVersion      = '2.2.0-alpha05'
    daggerVersion         = '2.24'
    okHttpVersion         = '3.12.5'
    retrofitVersion       = '2.6.2'
    frescoVersion         = '2.0.0'
    bigImageViewerVersion = '1.5.7'
    exoPlayerVersion      = '2.10.5'
    autoValueVersion      = '1.6.6'
    lombokVersion         = '1.18.10'
    leakCanaryVersion     = '1.6.3'
    robolectricVersion    = '4.3'
    powerMockVersion      = '2.0.2'
    espressoVersion       = '3.3.0-alpha02'
}

repositories {
    flatDir {
        dirs './aars'
    }
}

dependencies {
    androidTestImplementation fileTree(dir : 'aars', include : [ '*.aar' ])

    // Multi-dex support
    debugImplementation       "androidx.multidex:multidex:$multiDexVersion"
    testImplementation        "androidx.multidex:multidex:$multiDexVersion"
    androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0'

    // Android Architecture libraries
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"
    implementation ("androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion") {
        exclude group : 'com.android.support'
    }
    implementation ("androidx.lifecycle:lifecycle-extensions:$lifecycleVersion") {
        exclude group : 'com.android.support'
    }
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // Android Support libraries
    implementation 'androidx.browser:browser:1.2.0-alpha08'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta04'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'
    implementation 'com.google.android.material:material:1.1.0-alpha10'
    implementation 'com.takisoft.preferencex:preferencex:1.1.0-alpha05'

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.2.0'
    implementation 'com.google.firebase:firebase-perf:19.0.0'
    implementation 'com.google.firebase:firebase-config:19.0.2'

    // Reactive programming
    implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Dependency injection
    implementation      "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // Networking
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Database
    implementation 'io.realm:android-adapters:3.1.0'

    // Image processing
    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion"
    implementation "com.github.piasy:BigImageViewer:$bigImageViewerVersion"
    implementation 'com.github.stfalcon:frescoimageviewer:0.5.0'
    implementation 'androidx.exifinterface:exifinterface:1.1.0-beta01'

    // Video processing
    implementation ("com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion") {
        exclude group : 'com.android.support'
    }
    implementation ("com.google.android.exoplayer:exoplayer-ui:$exoPlayerVersion") {
        exclude group : 'com.android.support'
    }
    implementation ("com.google.android.exoplayer:extension-okhttp:$exoPlayerVersion") {
        exclude group : 'com.android.support'
    }

    // Eye candies
    implementation 'io.supercharge:shimmerlayout:2.1.0'
    implementation 'io.github.inflationx:calligraphy3:3.1.1'

    // Machine learning
    implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly'

    // Utilities
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.1'
    implementation 'org.apache.commons:commons-lang3:3.9'

    // Code generation tools
    compileOnly         "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly         "com.google.auto.value:auto-value-annotations:$autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"

    // Fabric
    implementation ('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    // Debugging
    implementation        'com.akaita.java:rxjava2-debug:1.4.0'
    debugImplementation   "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation    "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Unit testing
    testImplementation 'org.mockito:mockito-core:3.0.11'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"

    // Instrumented testing
    androidTestImplementation (name : 'cloudtestingscreenshotter_lib', ext : 'aar')
    androidTestImplementation ("androidx.test.espresso:espresso-core:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestImplementation ("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestImplementation ("androidx.test.espresso:espresso-intents:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestUtil           'androidx.test:orchestrator:1.3.0-alpha02'

    codacy 'com.codacy:codacy-coverage-reporter:6.0.7'
}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-v4:$supportLibraryVersion"
        force "com.android.support:support-media-compat:$supportLibraryVersion"
        force "com.google.auto.value:auto-value-annotations:$autoValueVersion"
    }
}

//region Checkstyle configurations

checkstyle {
    toolVersion    '8.24'
    configFile     rootProject.file('./checkstyle.xml')
    ignoreFailures true
    showViolations true
}

task checkstyle(type : Checkstyle) {
    description = 'Running Checkstyle'
    group       = 'verification'

    source  'src/main/java', 'src/debug/java'
    include '**/*.java'
    exclude '**/*Test.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    reports {
        xml.enabled  = Boolean.valueOf(System.getenv('CI'))
        html.enabled = !Boolean.valueOf(System.getenv('CI'))
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }

    classpath = files()
}

//endregion

//region SpotBugs configurations

spotbugs {
    toolVersion    '3.1.12'
    effort         'max'
    reportLevel    'medium'
    ignoreFailures true
    excludeFilter  rootProject.file('./spotbugs-exclude.xml')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled  = true == System.getenv('CI')
        html.enabled = true == !System.getenv('CI')
    }
}

//endregion

//region JaCoCo configurations

def coverageSourceDirs = [
    'src/main/java',
    'src/debug/java'
]

jacoco {
    toolVersion '0.8.4'
}

task jacocoTestReport(type : JacocoReport, dependsOn : 'testDebugUnitTest') {
    description = 'Generate JaCoCo coverage reports'
    group       = 'Reporting'

    classDirectories = fileTree(
        dir      : 'build/intermediates/javac/debug/classes',
        excludes : [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*RealmProxy.*',
            '**/*ColumnInfo.*',
            '**/*RealmModule*.*',
            '**/Dagger*.*',
            '**/*Module_Provide*Factory.*',
            '**/*_Factory.*',
            '**/*_MembersInjector.*',
            '**/*_LifecycleAdapter.*'
        ]
    )

    sourceDirectories = files(coverageSourceDirs)
    executionData     = fileTree(
        dir     : "$buildDir",
        include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec' ]
    )

    doFirst {
        files('build/intermediates/javac/debug/compileDebugJavaWithJavac').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    reports {
        xml.enabled  = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//endregion

//region Codacy configurations

task uploadCoverageToCodacy(type : JavaExec, dependsOn : jacocoTestReport) {
    main      = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy

    args = [
        "report",
        "-l",
        "Java",
        "-r",
        "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    ]
}

task (codacyDepsize) {
    doLast {
        def size = 0

        configurations.codacy.collect {
            it.length() / (1024 * 1024)
        }.each {
            size += it
        }

        println "Total dependencies size: ${Math.round(size * 100) / 100} MB"

        configurations.codacy.sort {
            -it.length()
        }.each {
            println "${it.name}: ${Math.round(it.length() / (1024) * 100) / 100} KB"
        }
    }
}

task (codacyLocs) {
    doLast {
        configurations.codacy.each {
            String jarName = it

            println jarName
        }
    }
}

//endregion

//region DexCount configurations

dexcount {
    includeTotalMethodCount = true
    orderByMethodCount      = true
}

//endregion

apply plugin : 'com.google.gms.google-services'
